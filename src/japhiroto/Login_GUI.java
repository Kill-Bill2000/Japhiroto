/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package japhiroto;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author robin
 */
public class Login_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public Login_GUI() {
        initComponents();
        initGUI();
        login = new Login();   //DataManager initialisieren
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgHostModus = new javax.swing.ButtonGroup();
        pnlNormal = new javax.swing.JPanel();
        jpbLogo = new japhiroto.JPictureBox();
        lblBenutzername = new javax.swing.JLabel();
        txfBenutzername = new javax.swing.JTextField();
        lblPasswort = new javax.swing.JLabel();
        txpPasswort = new javax.swing.JPasswordField();
        sep1 = new javax.swing.JSeparator();
        pnlErweitert = new javax.swing.JPanel();
        lblHost = new javax.swing.JLabel();
        txfIP1 = new javax.swing.JTextField();
        lblPunkt1 = new javax.swing.JLabel();
        txfIP2 = new javax.swing.JTextField();
        lblPunkt2 = new javax.swing.JLabel();
        txfIP3 = new javax.swing.JTextField();
        lblPunkt3 = new javax.swing.JLabel();
        txfIP4 = new javax.swing.JTextField();
        lblDPunkt = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        txfPort = new javax.swing.JTextField();
        lblDBName = new javax.swing.JLabel();
        txfDBName = new javax.swing.JTextField();
        lblDBUser = new javax.swing.JLabel();
        txfDBUser = new javax.swing.JTextField();
        lblDBPass = new javax.swing.JLabel();
        txpDBPass = new javax.swing.JPasswordField();
        rbtIP = new javax.swing.JRadioButton();
        rbtURL = new javax.swing.JRadioButton();
        pnlButtons = new javax.swing.JPanel();
        lblErweitert = new javax.swing.JLabel();
        btnAnmelden = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Japhiroto - Login");
        setResizable(false);

        jpbLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/japhiroto/Japhiroto_lang_schwarz.png"))); // NOI18N
        jpbLogo.setSizeMode(japhiroto.JPictureBox.SizeMode.ZOOM);

        lblBenutzername.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblBenutzername.setText("Benutzername:");

        txfBenutzername.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfBenutzername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfBenutzernameFocusGained(evt);
            }
        });
        txfBenutzername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfBenutzernameKeyTyped(evt);
            }
        });

        lblPasswort.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblPasswort.setText("Passwort:");

        txpPasswort.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txpPasswort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txpPasswortFocusGained(evt);
            }
        });
        txpPasswort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txpPasswortKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlNormalLayout = new javax.swing.GroupLayout(pnlNormal);
        pnlNormal.setLayout(pnlNormalLayout);
        pnlNormalLayout.setHorizontalGroup(
            pnlNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNormalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sep1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlNormalLayout.createSequentialGroup()
                        .addGroup(pnlNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txpPasswort, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txfBenutzername, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBenutzername, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPasswort, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpbLogo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlNormalLayout.setVerticalGroup(
            pnlNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNormalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jpbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBenutzername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfBenutzername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPasswort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txpPasswort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sep1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblHost.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblHost.setText("Host-Adresse:");

        txfIP1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfIP1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfIP1.setPreferredSize(new java.awt.Dimension(40, 27));
        txfIP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfIP1FocusGained(evt);
            }
        });
        txfIP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfIP1KeyTyped(evt);
            }
        });

        lblPunkt1.setText(".");

        txfIP2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfIP2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfIP2.setPreferredSize(new java.awt.Dimension(40, 27));
        txfIP2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfIP2FocusGained(evt);
            }
        });
        txfIP2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfIP2KeyTyped(evt);
            }
        });

        lblPunkt2.setText(".");

        txfIP3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfIP3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfIP3.setPreferredSize(new java.awt.Dimension(40, 27));
        txfIP3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfIP3FocusGained(evt);
            }
        });
        txfIP3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfIP3KeyTyped(evt);
            }
        });

        lblPunkt3.setText(".");

        txfIP4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfIP4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfIP4.setPreferredSize(new java.awt.Dimension(40, 27));
        txfIP4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfIP4FocusGained(evt);
            }
        });
        txfIP4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfIP4KeyTyped(evt);
            }
        });

        lblDPunkt.setText(":");

        lblPort.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblPort.setText("Port:");

        txfPort.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfPort.setPreferredSize(new java.awt.Dimension(56, 27));
        txfPort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfPortFocusGained(evt);
            }
        });
        txfPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfPortKeyTyped(evt);
            }
        });

        lblDBName.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblDBName.setText("DB-Name:");

        txfDBName.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfDBName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfDBNameFocusGained(evt);
            }
        });

        lblDBUser.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblDBUser.setText("DB-Username:");

        txfDBUser.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txfDBUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txfDBUserFocusGained(evt);
            }
        });

        lblDBPass.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        lblDBPass.setText("DB-Passwort:");

        txpDBPass.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txpDBPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txpDBPassFocusGained(evt);
            }
        });

        btgHostModus.add(rbtIP);
        rbtIP.setSelected(true);
        rbtIP.setText("IP");
        rbtIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtIPActionPerformed(evt);
            }
        });

        btgHostModus.add(rbtURL);
        rbtURL.setText("URL");
        rbtURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtURLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlErweitertLayout = new javax.swing.GroupLayout(pnlErweitert);
        pnlErweitert.setLayout(pnlErweitertLayout);
        pnlErweitertLayout.setHorizontalGroup(
            pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlErweitertLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfDBName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txfDBUser)
                    .addComponent(txpDBPass, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlErweitertLayout.createSequentialGroup()
                        .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlErweitertLayout.createSequentialGroup()
                                .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbtIP)
                                    .addComponent(rbtURL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlErweitertLayout.createSequentialGroup()
                                        .addComponent(txfIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPunkt1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txfIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPunkt2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txfIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPunkt3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txfIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblHost))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlErweitertLayout.createSequentialGroup()
                                .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDBName)
                                    .addComponent(lblDBUser)
                                    .addComponent(lblDBPass))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(5, 5, 5)
                        .addComponent(lblDPunkt)
                        .addGap(18, 18, 18)
                        .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPort))))
                .addContainerGap())
        );
        pnlErweitertLayout.setVerticalGroup(
            pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlErweitertLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlErweitertLayout.createSequentialGroup()
                        .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHost)
                            .addComponent(lblPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlErweitertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPunkt1)
                            .addComponent(txfIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPunkt2)
                            .addComponent(txfIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPunkt3)
                            .addComponent(txfIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDPunkt)))
                    .addGroup(pnlErweitertLayout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addComponent(rbtIP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtURL)))
                .addGap(18, 18, 18)
                .addComponent(lblDBName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfDBName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDBUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfDBUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDBPass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txpDBPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        lblErweitert.setForeground(new java.awt.Color(0, 0, 255));
        lblErweitert.setText("Erweitert ▼");
        lblErweitert.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblErweitert.setMaximumSize(new java.awt.Dimension(70, 16));
        lblErweitert.setPreferredSize(new java.awt.Dimension(70, 16));
        lblErweitert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblErweitertMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblErweitertMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblErweitertMouseExited(evt);
            }
        });

        btnAnmelden.setText("Anmelden");
        btnAnmelden.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAnmelden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnmeldenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblErweitert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnmelden, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAnmelden)
                    .addComponent(lblErweitert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlNormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlErweitert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlErweitert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean ausgeklappt;
    private int height;
    private String host, port, dbName, dbUser, dbPass;
    private Login login;
    private final String dateipfad = "zugangsdaten_db";
    
    private void initGUI(){   
        //Position in der Mitte des Bildschirms
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((int)(screenSize.getWidth() - this.getWidth()) / 2, (int)(screenSize.getHeight() - this.getHeight()) / 2);
        
        //"ausgelagerter" Konstruktor: ausgelagerte Befehle, die im Konstruktor ausgeführt werden sollen
        this.height = 290;
        pnlErweitert.setVisible(false);     //'Erweitert' ist nicht sichtbar, die Größe des Fensters wird entsprechend verkleinert
        this.setPreferredSize(new Dimension(this.getWidth(), this.getHeight() - height));
        this.pack();
        btnAnmelden.requestFocus();     //der Button 'Anmelden' erhält den Fokus
        
        //globale Variablen werden initialisiert
        this.ausgeklappt = false;
        this.host = "";
        this.port = "";
        this.dbName = "";
        this.dbUser = "";
        this.dbPass = "";
        
        //'•' als Platzhalter für Passwortfelder
        txpPasswort.setEchoChar('•');
        txpDBPass.setEchoChar('•');
        
        //IconImage setzen
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Japhiroto_kurz_schwarz.png")));
        
        //Filter für maximale Anzahl an Zeichen, die eingegeben werden können
        txfBenutzername.setDocument(new JTextFieldLimit(32));
        txpPasswort.setDocument(new JTextFieldLimit(32));
        txfPort.setDocument(new JTextFieldLimit(5));
        
        //Modus der Host-Adressen-Eingabe wird festgelegt
        setHostModus(rbtIP.isSelected());
     
        //Standardwerte für die Host-Eingabe werden gesetzt
        txfIP1.setText("127");
        txfIP2.setText("0");
        txfIP3.setText("0");
        txfIP4.setText("1");
        txfPort.setText("3306");
    }
     
    private void btnAnmeldenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnmeldenActionPerformed
        //Klick auf den 'Anmelden'-Button
        //Verbindung zur Datenbank wird hergestellt,
            //die Zugangsdaten werden bei manueller Eingabe in einer Datei gespeichert
            //die rollenbezogene GUI wird je nach abgefragter Benutzerrolle aufgerufen
        
        String user, pass;
        int rolle;
        
        try {
            user = txfBenutzername.getText();
            pass = login.passwortToString(txpPasswort.getPassword()); 
            
            if (erweitertAusgefuellt()) {   //Verbindung zur Datenbank wird aufgebaut
                dbDatenAendern(login.ipAdresseVorhanden(dateipfad));
                login.verbindungAufbauen(this.host, this.port, this.dbName, this.dbUser, this.dbPass);
            } else {
                login.verbindungAufbauen();
            }
            
        //TEST
            System.out.format("Verbindung aufgebaut: %s\n", login.verbindungAufgebaut());
            System.out.format("Account valide: %b\n", login.accountUeberpruefen(user, pass));
        //TEST ENDE
            
            if(login.accountUeberpruefen(user, pass)){
                rolle = login.rolleAbfragen(user, pass);
                if (rolle == 0) {
                    //Supermarktleiter GUI aufrufen und Login GUI schließen
        //TEST
                    System.out.println("SUPERMARKTLEITER");
        //TEST ENDE  
        
                } else if (rolle == 1){
                    //Kassierer GUI aufrufen und Login GUI schließen
        //TEST
                    System.out.println("KASSIERER");
        //TEST ENDE
                    
                } else if(rolle == 2){
                    //Lagerist GUI aufrufen und Login GUI schließen
        //TEST
                    System.out.println("LAGERIST");
        //TEST ENDE
                    
                } else {
                    //Rolle nicht gefunden oder falsche Rolle
                    JOptionPane.showMessageDialog(this, "Die Zugriffsrechte konnten nicht validiert werden.\n"
                            + "Bitte versuchen Sie es erneut oder\nüberprüfen Sie Ihren Account", "Hinweis", JOptionPane.INFORMATION_MESSAGE);
                
                }
            } else {
                getToolkit().beep();    //Fehler-Ton
                JOptionPane.showMessageDialog(this, "Anmeldung fehlgeschlagen.\nBenutzername oder Passwort ungültig!\n"
                        + "Bitte überprüfen Sie Ihre Zugangsdaten.", "Anmeldefehler", JOptionPane.ERROR_MESSAGE);
            }
                        
            
        } catch (SQLException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Verbindung zur Datenbank \nkonnte nicht hergestellt werden."
                    + "\n\n Bitte überprüfen Sie Ihre Eingaben \noder Ihre Internetverbindung", "Verbindungsfehler", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Ein unbekannter Fehler ist aufgetreten.", "Fehler", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex){
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Ein Fehler ist aufgetreten.\nEs dürfen nur Zahlen bei \n'Host-Adresse' bzw. 'Port' \n"
                    + "verwendet werden", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnAnmeldenActionPerformed

    private void lblErweitertMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblErweitertMouseEntered
        //fügt einen Unterstrich hinzu, wenn die Maus das Label berührt
        
        if (ausgeklappt) {
           lblErweitert.setText("<HTML><U>Erweitert ▲</U></HTML>"); 
        } else {
           lblErweitert.setText("<HTML><U>Erweitert ▼</U></HTML>"); 
        }
        
    }//GEN-LAST:event_lblErweitertMouseEntered

    private void lblErweitertMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblErweitertMouseExited
        //entfernt den Unterstrich, wenn die Maus das Label verlässt
        
        if (ausgeklappt) {
            lblErweitert.setText("Erweitert ▲");
        } else {
            lblErweitert.setText("Erweitert ▼");
        }
 
    }//GEN-LAST:event_lblErweitertMouseExited

    private void lblErweitertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblErweitertMouseClicked
        //ändert die Größe des Fensters, wenn auf 'Erweitert' eklickt wird
        
        String[] daten;
        
        if (!ausgeklappt) {     //bisheriger Status: 'Erweitert' ist nicht sichtbar
                //'Erweitert' ist wird sichtbar, Fenster wird größer, Pfeil des Labels zeigt nach oben
                pnlErweitert.setVisible(true);
                lblErweitert.setText("<HTML><U>Erweitert ▲</U></HTML>");
                this.setPreferredSize(new Dimension(this.getWidth(), this.getHeight() + height));
                
        } else {                //bisheriger Status: 'Erweitert' ist sichtbar
            //'Erweitert' ist wird unsichtbar, Fenster wird kleiner, Pfeil des Labels zeigt nach unten
            pnlErweitert.setVisible(false);
            lblErweitert.setText("<HTML><U>Erweitert ▼</U></HTML>");
            this.setPreferredSize(new Dimension(this.getWidth(), this.getHeight() - height));
        }   
        
        ausgeklappt = !ausgeklappt;
        this.pack();

        
        try {   //Daten aus 'zugangsdaten_db' werden eingelesen und in den entsprechenden Textfeldern ausgegeben
            if (ausgeklappt == true) {
                daten = login.datenEinlesen(dateipfad);
                
                setHostValues(rbtIP.isSelected());
                
                txfPort.setText(daten[5]);
                txfDBName.setText(daten[6]);
                txfDBUser.setText(daten[7]);
                txpDBPass.setText(daten[8]);
            }
            
        } catch (IOException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Ein Fehler ist aufgetreten.\nDie Datei \'" + dateipfad + "\'\nwurde nicht gefunden."
                    , "Datei nicht gefunden", JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException ex){
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Datei \'" + dateipfad + "\'\nbeinhaltet keine Zugangsdaten."
                    , "Zugangsdaten nicht gefunden", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_lblErweitertMouseClicked

    private void txpPasswortFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txpPasswortFocusGained
        //löscht den Text, wenn das Passwort-Feld den Fokus erhält
        txpPasswort.setText("");
    }//GEN-LAST:event_txpPasswortFocusGained

    private void txpDBPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txpDBPassFocusGained
        //löscht den Text, wenn das Passwort-Feld den Fokus erhält
        txpDBPass.setText("");
    }//GEN-LAST:event_txpDBPassFocusGained

    private void txfIP2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfIP2FocusGained
        //löscht den Text, wenn das IP-Feld den Fokus erhält
        txfIP2.setText("");
    }//GEN-LAST:event_txfIP2FocusGained

    private void txfIP3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfIP3FocusGained
        //löscht den Text, wenn das IP-Feld den Fokus erhält
        txfIP3.setText("");
    }//GEN-LAST:event_txfIP3FocusGained

    private void txfIP4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfIP4FocusGained
        //löscht den Text, wenn das IP-Feld den Fokus erhält
        txfIP4.setText("");
    }//GEN-LAST:event_txfIP4FocusGained

    private void txfPortFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfPortFocusGained
        //löscht den Text, wenn das Port-Feld den Fokus erhält
        txfPort.setText("");
    }//GEN-LAST:event_txfPortFocusGained
    
    private void txfIP2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfIP2KeyTyped
        //nach 3 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txfIP2.getText().length() >= 3 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txfIP2KeyTyped

    private void txfIP3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfIP3KeyTyped
        //nach 3 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txfIP3.getText().length() >= 3 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txfIP3KeyTyped

    private void txfIP4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfIP4KeyTyped
        //nach 3 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txfIP4.getText().length() >= 3 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txfIP4KeyTyped

    private void txfPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfPortKeyTyped
        //nach 5 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txfPort.getText().length() >= 5 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txfPortKeyTyped

    private void txfBenutzernameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfBenutzernameKeyTyped
        //nach 32 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txfBenutzername.getText().length() >= 32 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txfBenutzernameKeyTyped

    private void txpPasswortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txpPasswortKeyTyped
        //nach 32 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txpPasswort.getPassword().length >= 32 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txpPasswortKeyTyped

    private void txfIP1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfIP1KeyTyped
        //nach 3 eingegebenen Zeichen ertönt ein Fehler-Ton
        if(txfIP1.getText().length() >= 3 && !((evt.getKeyChar() == KeyEvent.VK_DELETE) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txfIP1KeyTyped

    private void txfIP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfIP1FocusGained
        //löscht den Text, wenn das IP-Feld den Fokus erhält
        txfIP1.setText("");
    }//GEN-LAST:event_txfIP1FocusGained

    private void txfDBNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfDBNameFocusGained
        //löscht den Text, wenn das DBName-Feld den Fokus erhält
        txfDBName.setText("");
    }//GEN-LAST:event_txfDBNameFocusGained

    private void txfDBUserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfDBUserFocusGained
       //löscht den Text, wenn das DBUser-Feld den Fokus erhält
        txfDBUser.setText("");
    }//GEN-LAST:event_txfDBUserFocusGained

    private void txfBenutzernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfBenutzernameFocusGained
        //löscht den Text, wenn das Benutzername-Feld den Fokus erhält
        txfBenutzername.setText("");
    }//GEN-LAST:event_txfBenutzernameFocusGained

    private void rbtIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtIPActionPerformed
        try {
            //Passt die Ansicht der Host-Eingabe an
            setHostModus(rbtIP.isSelected());
            setHostValues(rbtIP.isSelected());
        } catch (IOException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Ein Fehler ist aufgetreten.\nDie Datei \'" + dateipfad + "\'\nwurde nicht gefunden."
                    , "Datei nicht gefunden", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbtIPActionPerformed

    private void rbtURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtURLActionPerformed
        try {
            //Passt die Ansicht der Host-Eingabe an
            setHostModus(rbtIP.isSelected());
            setHostValues(rbtIP.isSelected());
        } catch (IOException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Ein Fehler ist aufgetreten.\nDie Datei \'" + dateipfad + "\'\nwurde nicht gefunden."
                    , "Datei nicht gefunden", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbtURLActionPerformed

    private void dbDatenAendern(boolean ipVorhanden) throws NumberFormatException{
        //liest die eingegebenen Daten der Oberfläche ein und speichert diese in den globalen Variablen
        //Hinweis: Konvertierung zu int und dann zu String dient zum einfachen Abfangen von NumberFormatExceptions
        
        if (!ipVorhanden) {
            this.host = txfIP1.getText();
        } else {
            int ip1 = Integer.parseInt(txfIP1.getText());
            int ip2 = Integer.parseInt(txfIP2.getText());
            int ip3 = Integer.parseInt(txfIP3.getText());
            int ip4 = Integer.parseInt(txfIP4.getText());
            this.host = ip1 + "." + ip2 + "." + ip3 + "." + ip4;
        }
        
        this.port = Integer.toString(Integer.parseInt(txfPort.getText()));
        this.dbName = txfDBName.getText();
        this.dbUser = txfDBUser.getText();
        this.dbPass = login.passwortToString(txpDBPass.getPassword());
    }
    
    private boolean erweitertAusgefuellt() throws NumberFormatException{
        //liefert true zurück, wenn alle Felder der erweiterten Oberfläche ausgefüllt sind
        
        boolean ausg;
        boolean ip1Ausg;
        boolean ip2Ausg;
        boolean ip3Ausg;
        boolean ip4Ausg;
        
        if (rbtIP.isSelected()) {
            ip1Ausg = !txfIP1.getText().equals("");
            ip2Ausg = !txfIP2.getText().equals("");
            ip3Ausg = !txfIP3.getText().equals("");
            ip4Ausg = !txfIP4.getText().equals("");
        } else {
            ip1Ausg = !txfIP1.getText().equals("");
            ip2Ausg = true;
            ip3Ausg = true;
            ip4Ausg = true;
        }
        
        boolean portAusg = !txfPort.getText().equals("");
        boolean dbNameAusg = !txfDBName.getText().equals("");
        boolean dbUserAusg = !txfDBUser.getText().equals("");
        boolean dbPassAusg = !login.passwortToString(txpDBPass.getPassword()).equals("");
        
        ausg = ip1Ausg && ip2Ausg && ip3Ausg && ip4Ausg && portAusg && dbNameAusg && dbUserAusg && dbPassAusg;
        
        return ausg;
    }
      
    private void setHostModus(boolean ipSelected){
        //passt die Eingabe der Host-Adresse dem ausgewählten Radio-Button an
        
        if(ipSelected){     //rbtIP ist ausgewählt
            //Alle IP-Felder sichtbar machen
            txfIP1.setVisible(true);
            txfIP2.setVisible(true);
            txfIP3.setVisible(true);
            txfIP4.setVisible(true);
            lblPunkt1.setVisible(true);
            lblPunkt2.setVisible(true);
            lblPunkt3.setVisible(true);
            
            //Größe der IP-Felder setzen
            txfIP1.setPreferredSize(new Dimension(40, 27));
            txfIP2.setPreferredSize(new Dimension(40, 27));
            txfIP3.setPreferredSize(new Dimension(40, 27));
            txfIP4.setPreferredSize(new Dimension(40, 27));
            
            //Maximale Zeichenlänge festlegen
            txfIP1.setDocument(new JTextFieldLimit(3));
            txfIP2.setDocument(new JTextFieldLimit(3));
            txfIP3.setDocument(new JTextFieldLimit(3));
            txfIP4.setDocument(new JTextFieldLimit(3));
            
            //IP-Feld 1 zentriert machen
            txfIP1.setHorizontalAlignment(JTextField.CENTER);
            
        } else {        //rtbURL ist ausgewählt
            //IP-Felder 2 - 4 und Punkte unsichtbar machen
            txfIP1.setVisible(true);
            txfIP2.setVisible(false);
            txfIP3.setVisible(false);
            txfIP4.setVisible(false);
            lblPunkt1.setVisible(false);
            lblPunkt2.setVisible(false);
            lblPunkt3.setVisible(false);
            
            //Größe von IP-Feld 1 setzen
            txfIP1.setPreferredSize(new Dimension(205, 27));
            txfIP2.setPreferredSize(new Dimension(40, 27));
            txfIP3.setPreferredSize(new Dimension(40, 27));
            txfIP4.setPreferredSize(new Dimension(40, 27));
            
            //Maximale Zeichenlänge festlegen
            txfIP1.setDocument(new JTextFieldLimit(50));
            txfIP2.setDocument(new JTextFieldLimit(3));
            txfIP3.setDocument(new JTextFieldLimit(3));
            txfIP4.setDocument(new JTextFieldLimit(3));
            
            //IP-Feld 1 linksbündig machen
            txfIP1.setHorizontalAlignment(JTextField.LEFT);
        }
        

    }
    
    private void setHostValues(boolean ipSelected) throws IOException{
        //setzt die Werte der Host-Felder
        
        String[] daten = login.datenEinlesen(dateipfad);

        if (ipSelected) {
            if (daten[0].equals("false")) {
                txfIP1.setText("");
                txfIP2.setText("");
                txfIP3.setText("");
                txfIP4.setText("");
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "Die gefundene Host-Adresse ist eine URL. \n\nBitte wählen Sie den URL-Modus aus, \num diese anzuzeigen.", "URL gefunden", JOptionPane.INFORMATION_MESSAGE);
            } else {
                txfIP1.setText(daten[1]);
                txfIP2.setText(daten[2]);
                txfIP3.setText(daten[3]);
                txfIP4.setText(daten[4]);
            }
        } else {
            if (daten[0].equals("false")) {
                txfIP1.setText(daten[1]);
            } else {
                txfIP1.setText(daten[1] + "." + daten[2] + "." + daten[3] + "." + daten[4]);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgHostModus;
    private javax.swing.JButton btnAnmelden;
    private japhiroto.JPictureBox jpbLogo;
    private javax.swing.JLabel lblBenutzername;
    private javax.swing.JLabel lblDBName;
    private javax.swing.JLabel lblDBPass;
    private javax.swing.JLabel lblDBUser;
    private javax.swing.JLabel lblDPunkt;
    private javax.swing.JLabel lblErweitert;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblPasswort;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPunkt1;
    private javax.swing.JLabel lblPunkt2;
    private javax.swing.JLabel lblPunkt3;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlErweitert;
    private javax.swing.JPanel pnlNormal;
    private javax.swing.JRadioButton rbtIP;
    private javax.swing.JRadioButton rbtURL;
    private javax.swing.JSeparator sep1;
    private javax.swing.JTextField txfBenutzername;
    private javax.swing.JTextField txfDBName;
    private javax.swing.JTextField txfDBUser;
    private javax.swing.JTextField txfIP1;
    private javax.swing.JTextField txfIP2;
    private javax.swing.JTextField txfIP3;
    private javax.swing.JTextField txfIP4;
    private javax.swing.JTextField txfPort;
    private javax.swing.JPasswordField txpDBPass;
    private javax.swing.JPasswordField txpPasswort;
    // End of variables declaration//GEN-END:variables

    
}
