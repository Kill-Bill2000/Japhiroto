/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package japhiroto;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.SQLException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author tomas.hrubec
 */
public class Marktleiter_GUI extends javax.swing.JFrame {
    
    private Graphics2D diagram;
    private int sizeX; // =500
    private int sizeY; // =400
    private int zeroX = sizeX;
    private int zeroY = sizeY;
    
    private DB_Verbindung database;
          
    /**
     * Creates new form Marktleiter_GUI
     * @throws java.io.IOException
     */
    public Marktleiter_GUI() throws IOException {
        initComponents();
        
        diagram = (Graphics2D)cvDrawField.getGraphics();
        sizeX = cvDrawField.getWidth();
        sizeY = cvDrawField.getHeight();
                        
        //set zero
        // sizeX = 500, sizeY = 400
        // zeroX = 25;
        // zeroY = 370;
               
        zeroX = sizeX - 475;
        zeroY = sizeY - 30;
        
        
            
        try {
            database = new DB_Verbindung();
            database.verbindungAufbauen();
        } catch (SQLException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Verbindung zur Datenbank \nkonnte nicht hergestellt werden.", "Verbindungsfehler", JOptionPane.ERROR_MESSAGE);
        }
        
        
        setProperties();                  
    }
    
    private void setProperties(){
        //Position in der Mitte des Bildschirms
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((int)(screenSize.getWidth() - this.getWidth()) / 2, (int)(screenSize.getHeight() - this.getHeight()) / 2);
        
        //IconImage setzen
        //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Japhiroto_kurz_schwarz_16.png")));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        lblUmsatz = new javax.swing.JLabel();
        lblMitarbeiter = new javax.swing.JLabel();
        lblAuswahl = new javax.swing.JLabel();
        scrlPanAuswahl = new javax.swing.JScrollPane();
        jListEmployees = new javax.swing.JList<>();
        txfMitarbeiterID = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        lblVorname = new javax.swing.JLabel();
        txfVorname = new javax.swing.JTextField();
        txfNachname = new javax.swing.JTextField();
        lblNachname = new javax.swing.JLabel();
        ComBoxDateFrom = new javax.swing.JComboBox<>();
        lblDatumauswahl = new javax.swing.JLabel();
        lblDatumVon = new javax.swing.JLabel();
        lblDatumBis = new javax.swing.JLabel();
        ComBoxDateUntil = new javax.swing.JComboBox<>();
        btnShowSales = new javax.swing.JButton();
        btnWarehouseList = new javax.swing.JButton();
        btnOrders = new javax.swing.JButton();
        lblStatusBestellungen = new javax.swing.JLabel();
        txfBestellt = new javax.swing.JTextField();
        lblBestellt = new javax.swing.JLabel();
        txfInBearb = new javax.swing.JTextField();
        lblInBearb = new javax.swing.JLabel();
        lblAnrede = new javax.swing.JLabel();
        txfAnrede = new javax.swing.JTextField();
        txfStrasse = new javax.swing.JTextField();
        lblStarsse = new javax.swing.JLabel();
        txfHausNr = new javax.swing.JTextField();
        lblHausNr = new javax.swing.JLabel();
        txfPLZ = new javax.swing.JTextField();
        lblPLZ = new javax.swing.JLabel();
        txfOrt = new javax.swing.JTextField();
        lblOrt = new javax.swing.JLabel();
        txfStundenlohn = new javax.swing.JTextField();
        lblStundenlohn = new javax.swing.JLabel();
        cvDrawField = new java.awt.Canvas();
        btnLoadList = new javax.swing.JButton();
        btnLoadDates = new javax.swing.JButton();
        btnMitarbeiterAnlegen = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Marktleiter");
        setResizable(false);

        lblUmsatz.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblUmsatz.setText("Umsatz- und Warenverwaltung");

        lblMitarbeiter.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblMitarbeiter.setText("Mitarbeiterverwaltung");

        lblAuswahl.setText("Auswahl");

        jListEmployees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListEmployeesMouseClicked(evt);
            }
        });
        scrlPanAuswahl.setViewportView(jListEmployees);

        txfMitarbeiterID.setEditable(false);

        lblID.setText("Mitarbeiter ID");

        lblVorname.setText("Vorname");

        txfVorname.setEditable(false);

        txfNachname.setEditable(false);

        lblNachname.setText("Nachname");

        ComBoxDateFrom.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComBoxDateFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComBoxDateFromActionPerformed(evt);
            }
        });

        lblDatumauswahl.setText("Datumauswahl:");

        lblDatumVon.setText("Von:");

        lblDatumBis.setText("Bis:");

        ComBoxDateUntil.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ComBoxDateUntil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComBoxDateUntilActionPerformed(evt);
            }
        });

        btnShowSales.setText("Umsatz Anzeigen");
        btnShowSales.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnShowSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowSalesActionPerformed(evt);
            }
        });

        btnWarehouseList.setText("Lager Anzeigen");
        btnWarehouseList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnWarehouseList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWarehouseListActionPerformed(evt);
            }
        });

        btnOrders.setText("Bestellungen Anzeigen");
        btnOrders.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdersActionPerformed(evt);
            }
        });

        lblStatusBestellungen.setText("Status offener Bestellungen:");

        txfBestellt.setEditable(false);
        txfBestellt.setText("Anzahl");

        lblBestellt.setText("Bestellt insgesamt:");

        txfInBearb.setEditable(false);
        txfInBearb.setText("Anzahl");

        lblInBearb.setText("In Bearbeitung:");

        lblAnrede.setText("Anrede");

        txfAnrede.setEditable(false);

        txfStrasse.setEditable(false);

        lblStarsse.setText("Strasse");

        txfHausNr.setEditable(false);

        lblHausNr.setText("Haus Nr.");

        txfPLZ.setEditable(false);

        lblPLZ.setText("PLZ");

        txfOrt.setEditable(false);

        lblOrt.setText("Ort");

        txfStundenlohn.setEditable(false);

        lblStundenlohn.setText("Stundenlohn");

        cvDrawField.setBackground(new java.awt.Color(255, 255, 255));

        btnLoadList.setText("Liste Laden");
        btnLoadList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnLoadList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadListActionPerformed(evt);
            }
        });

        btnLoadDates.setText("Daten Laden");
        btnLoadDates.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnLoadDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDatesActionPerformed(evt);
            }
        });

        btnMitarbeiterAnlegen.setText("neuen Mitarbeiter anlegen");
        btnMitarbeiterAnlegen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnMitarbeiterAnlegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMitarbeiterAnlegenActionPerformed(evt);
            }
        });

        jButton1.setText("Accounts verwalten");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUmsatz)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblDatumauswahl)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(lblDatumBis, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblDatumVon))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ComBoxDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(ComBoxDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGap(6, 6, 6))
                                        .addComponent(btnOrders, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnWarehouseList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnShowSales, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnLoadDates, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblBestellt)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txfBestellt)
                                            .addComponent(txfInBearb)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblStatusBestellungen)
                                        .addGap(18, 18, 18)))
                                .addComponent(lblInBearb, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cvDrawField, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblMitarbeiter, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(scrlPanAuswahl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAuswahl, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnLoadList, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txfMitarbeiterID, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txfAnrede, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblID)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblAnrede))
                                            .addComponent(lblStarsse)
                                            .addComponent(txfStrasse, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblHausNr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(txfHausNr, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblPLZ)
                                                    .addComponent(txfPLZ, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(lblVorname)
                                            .addComponent(txfVorname, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblNachname)
                                                    .addComponent(txfNachname, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblStundenlohn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(txfStundenlohn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(lblOrt)
                                            .addComponent(txfOrt, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(btnMitarbeiterAnlegen))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUmsatz)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDatumauswahl)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComBoxDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDatumVon))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComBoxDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDatumBis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLoadDates)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowSales)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnWarehouseList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOrders)
                        .addGap(26, 26, 26)
                        .addComponent(lblStatusBestellungen)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBestellt)
                            .addComponent(txfBestellt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInBearb)
                            .addComponent(txfInBearb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9))
                    .addComponent(cvDrawField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(lblMitarbeiter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadList)
                    .addComponent(lblAuswahl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrlPanAuswahl, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblVorname)
                                    .addComponent(lblAnrede)
                                    .addComponent(lblID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txfVorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfAnrede, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfMitarbeiterID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblNachname)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txfNachname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblStundenlohn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txfStundenlohn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStarsse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfStrasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHausNr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfHausNr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrt, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPLZ))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txfOrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfPLZ, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMitarbeiterAnlegen)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComBoxDateUntilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComBoxDateUntilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComBoxDateUntilActionPerformed

    private void btnWarehouseListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWarehouseListActionPerformed
        // TODO add your handling code here:
        new LagerArtikelSuchen().setVisible(true);
    }//GEN-LAST:event_btnWarehouseListActionPerformed

    private void btnOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdersActionPerformed
        new LagerBestellungenGUI().setVisible(true);
        
        try {
            txfBestellt.setText(Integer.toString(database.getBestellungenInsgesamt()));
            txfInBearb.setText(Integer.toString(database.getBestellungenInBearbeitung()));
        } catch (SQLException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Verbindung zur Datenbank \nkonnte nicht hergestellt werden.", "Verbindungsfehler", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOrdersActionPerformed

    private void btnShowSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowSalesActionPerformed
        // TODO add your handling code here:
        diagram.clearRect(0, 0, cvDrawField.getWidth(), cvDrawField.getHeight());

        drawAxes();
        drawSelectedDates();
        drawSelectedSales();
    }//GEN-LAST:event_btnShowSalesActionPerformed

    private void btnLoadListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadListActionPerformed
        // TODO add your handling code here:             
        DefaultListModel list = new DefaultListModel();
        jListEmployees.setModel(list);    
        
//      TEST:        
//        list.addElement("Liste Aller Mitarbeiter: ");

        ArrayList<Mitarbeiter> employeesArrList= new ArrayList<>();
               
        try {
            employeesArrList = database.getAllEmployeesArrayList();
        } catch (SQLException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Verbindung zur Datenbank \nkonnte nicht hergestellt werden.", "Verbindungsfehler", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error at: database.getAllEmployeesArray() " 
                    + "\n LocalizedMessage:  " + ex.getLocalizedMessage() + "\n Message: " + ex.getMessage() 
                    + "\n String: " + ex.toString(), "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        for (int i = 0; i < employeesArrList.size(); i++) {
            list.addElement( employeesArrList.get(i).getAnrede() + " " +  employeesArrList.get(i).getVorname() + " " +  employeesArrList.get(i).getNachname());
        }         
    }//GEN-LAST:event_btnLoadListActionPerformed

    private void jListEmployeesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEmployeesMouseClicked
        // fills the selected employee data in corresponding fields
        
        String selected = jListEmployees.getSelectedValue();
                        
        String[] parts = selected.split(" ");
        String name = parts[1];
        String surname = parts[2];
        
//// TEST:
//        System.out.println(selected);
//        System.out.println(name);
//        System.out.println(surname);        
        
        try {        
            txfMitarbeiterID.setText(Integer.toString(database.getEmployeeData(name, surname).getMitarbeiterId()));
            txfAnrede.setText(database.getEmployeeData(name, surname).getAnrede());
            txfVorname.setText(database.getEmployeeData(name, surname).getVorname());
            txfNachname.setText(database.getEmployeeData(name, surname).getNachname());
            txfStrasse.setText(database.getEmployeeData(name, surname).getStrasse());
            txfHausNr.setText(Integer.toString(database.getEmployeeData(name, surname).getHausNr()));
            txfPLZ.setText(Integer.toString(database.getEmployeeData(name, surname).getPlz()));
            txfOrt.setText(database.getEmployeeData(name, surname).getOrt());
            txfStundenlohn.setText(Double.toString(database.getEmployeeData(name, surname).getStundenLohn()));
        } catch (SQLException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Verbindung zur Datenbank \nkonnte nicht hergestellt werden.", "Verbindungsfehler", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error at: database.getEmployeeData() " 
                    + "\n LocalizedMessage:  " + ex.getLocalizedMessage() + "\n Message: " + ex.getMessage() 
                    + "\n String: " + ex.toString(), "Error", JOptionPane.INFORMATION_MESSAGE);
        }       
        


    }//GEN-LAST:event_jListEmployeesMouseClicked

    private void btnLoadDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDatesActionPerformed
        // TODO add your handling code here:
        
        DefaultComboBoxModel listFrom = new DefaultComboBoxModel();
        ComBoxDateFrom.setModel(listFrom);  
        DefaultComboBoxModel listUntil = new DefaultComboBoxModel();
        ComBoxDateUntil.setModel(listUntil);
                
//        ComBoxDateFrom.addItem("10.05.2018"); 
//        ComBoxDateUntil.addItem("05.06.2018"); 
       
        ArrayList<Umsatz> salesDatesArrList= new ArrayList<>();
        
        try {             
            salesDatesArrList = database.getAllSales();
        } catch (SQLException ex) {
            getToolkit().beep();    //Fehler-Ton
            JOptionPane.showMessageDialog(this, "Die Verbindung zur Datenbank \nkonnte nicht hergestellt werden.", "Verbindungsfehler", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error at: database.getAllSales() " 
                    + "\n LocalizedMessage:  " + ex.getLocalizedMessage() + "\n Message: " + ex.getMessage() 
                    + "\n String: " + ex.toString(), "Error", JOptionPane.INFORMATION_MESSAGE);
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm", Locale.GERMANY);
        
        for (int i = 0; i < salesDatesArrList.size(); i++) {
            ComBoxDateFrom.addItem(salesDatesArrList.get(i).getZeitstempel().format(formatter).toString());
            ComBoxDateUntil.addItem(salesDatesArrList.get(i).getZeitstempel().format(formatter).toString());
        }
        System.out.println(salesDatesArrList.get(1).getZeitstempel().format(formatter)); 
    }//GEN-LAST:event_btnLoadDatesActionPerformed

    private void ComBoxDateFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComBoxDateFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComBoxDateFromActionPerformed

    private void btnMitarbeiterAnlegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMitarbeiterAnlegenActionPerformed
        new MitarbeiterAnlegen_GUI().setVisible(true);
    }//GEN-LAST:event_btnMitarbeiterAnlegenActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new AccountsVerwalten_GUI().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Marktleiter_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Marktleiter_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Marktleiter_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Marktleiter_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Marktleiter_GUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Marktleiter_GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    
    private void drawAxes(){
        //testline
//        diagram.drawLine(zeroX, zeroY, sizeX, 0);

        // draw axes  
        diagram.drawLine(zeroX - 5, zeroY, sizeX - 15, zeroY);
        diagram.drawLine(zeroX, sizeY - 385, zeroX, sizeY - 25); 
        
    }
    
    /*private LocalDateTime convertStringIntoLocalDateTime(String inputString){
        
        String[] partsDateTime = inputString.split(" ");
        String date = partsDateTime[0];        
        String time = partsDateTime[1];        
//                                                                                System.out.println("Date " + FromDate);
//                                                                                System.out.println("Time " + FromTime);        
        String[] partsDate = date.split("\\-");
        int year = Integer.valueOf(partsDate[0]);        
        int month = Integer.valueOf(partsDate[1]);
        int day = Integer.valueOf(partsDate[2]);
        
        String[] TimePartsFrom = time.split("\\:");
        int hour = Integer.valueOf(TimePartsFrom[0]);        
        int minute = Integer.valueOf(TimePartsFrom[1]);        
//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourFrom " + hourFrom);
//                                                                                System.out.println("minuteFrom " + minuteFrom);
        return LocalDateTime.of(year, month, day, hour, minute);
    }*/
    
    private LocalDate convertStringIntoLocalDate(String inputString){
        
        String[] partsDateTime = inputString.split(" ");
        String date = partsDateTime[0];         
//                                                                                System.out.println("Date " + FromDate);
//                                                                                System.out.println("Time " + FromTime);        
        String[] partsDate = date.split("\\-");
        int year = Integer.valueOf(partsDate[0]);        
        int month = Integer.valueOf(partsDate[1]);
        int day = Integer.valueOf(partsDate[2]);
//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourFrom " + hourFrom);
//                                                                                System.out.println("minuteFrom " + minuteFrom);
        return LocalDate.of(year, month, day);
    }
    
    private ArrayList<Integer> drawSelectedDates(){  
        
        String selectedFrom = ComBoxDateFrom.getSelectedItem().toString();
        String selectedUntil = ComBoxDateUntil.getSelectedItem().toString();

        LocalDate dateFrom = convertStringIntoLocalDate(selectedFrom);
        LocalDate dateUntil = convertStringIntoLocalDate(selectedUntil);
               
        Period period = Period.between(dateFrom, dateUntil);
        int differenceDay = period.getDays();
        int differenceMonth = period.getMonths();            
  
        //TEST:
//        System.out.println("differenceDay " + differenceDay);
//        System.out.println("differenceMonth " + differenceMonth);
        //TESTEND
//      

        int dayFrom = dateFrom.getDayOfMonth();

        int scaleX = 1;
        
        if (differenceMonth == 0) {
            if (differenceDay == 0){
                JOptionPane.showMessageDialog(this, "Der Zeitunterschied ist zu gering", "Hinweis", JOptionPane.INFORMATION_MESSAGE);
                return null;
            }
            if (differenceDay >= 1){
//                System.out.println("using differenceDay " + differenceDay);
                scaleX = differenceDay; //+1 to show enought values in graph  
            }
        }        
        if (differenceMonth >= 1) {
          JOptionPane.showMessageDialog(this, "Der Zeitunterschied ist zu groß, maximal 31 Tage sind zugelassen", "Hinweis", JOptionPane.INFORMATION_MESSAGE);
          return null;
        }
        
        // draw scale 
        // X-axis
        
        int lengthX = sizeX - zeroX - 15; 
        int spacingX = lengthX / scaleX;
        //TEST:
//        System.out.println("sizeX " + sizeX);
//        System.out.println("zeroX " + zeroX);
//        System.out.println("lengthX " + lengthX);
//        System.out.println("scaleX " + scaleX);
//        System.out.println("spacingX " + spacingX);
//        //TESTEND
        
        ArrayList<Umsatz> datesArrList= new ArrayList<>(); 

        try {             
            datesArrList = database.getAllSales();
        } catch (SQLException ex) {
            Logger.getLogger(Marktleiter_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error at: database.getAllEmployeesArray() " 
                    + "\n LocalizedMessage:  " + ex.getLocalizedMessage() + "\n Message: " + ex.getMessage() 
                    + "\n String: " + ex.toString(), "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        ArrayList<Integer> usedValuesOnXArr= new ArrayList<>(); 
        
        for (int i = 0; i < scaleX + 1; i++) {
            diagram.drawLine(zeroX + i*spacingX, zeroY - 5, zeroX + i*spacingX, zeroY + 5);
            
            int usedValuesOnX = zeroX + i*spacingX - 5;
            diagram.drawString(datesArrList.get(i).getZeitstempel().getDayOfMonth() + ".", usedValuesOnX, zeroY + 20);
            usedValuesOnXArr.add(usedValuesOnX);
            System.out.println("usedValuesOnX = " + usedValuesOnX);
        }
        return usedValuesOnXArr;
    }
        
    private ArrayList<Integer> drawSelectedSales(){  

//        DefaultComboBoxModel listFrom = new DefaultComboBoxModel();
//        ComBoxDateFrom.setModel(listFrom);  
//        DefaultComboBoxModel listUntil = new DefaultComboBoxModel();
//        ComBoxDateUntil.setModel(listUntil);
//                
//        ComBoxDateFrom.addItem("10.05.2018"); 
//        ComBoxDateUntil.addItem("05.06.2018"); 
       
        ArrayList<Umsatz> salesArrList= new ArrayList<>();  
        
        try {             
            salesArrList = database.getAllSales();
        } catch (SQLException ex) {
            Logger.getLogger(Marktleiter_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error at: database.getAllEmployeesArray() " 
                    + "\n LocalizedMessage:  " + ex.getLocalizedMessage() + "\n Message: " + ex.getMessage() 
                    + "\n String: " + ex.toString(), "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
//        for (int i = 0; i < salesArrList.size(); i++) {
//            ComBoxDateFrom.addItem(salesArrList.get(i).getZeitstempel().toString());
//            ComBoxDateUntil.addItem(salesArrList.get(i).getZeitstempel().toString());
//        }   
               
//        Double selectedFrom = salesArrList.get(ComBoxDateFrom.getSelectedIndex()).getUmsatz();
//        Double selectedUntil = salesArrList.get(ComBoxDateUntil.getSelectedIndex()).getUmsatz();
        
        int selectedFromIndex = ComBoxDateFrom.getSelectedIndex();
        int selectedUntilIndex = ComBoxDateUntil.getSelectedIndex();
        
//        System.out.println("selectedFrom " + selectedFrom);
//        System.out.println("selectedUntil " + selectedUntil);
//        Double differenceUnrounded = selectedUntil-selectedFrom;
//        int scaleY = differenceUnrounded.intValue();
        int scaleY = selectedUntilIndex - selectedFromIndex;
        
        int lengthY = zeroY - 15; 
        int spacingY = lengthY / scaleY;
        //TEST:
//        System.out.println("sizeY " + sizeY);
//        System.out.println("zeroY " + zeroY);
//        System.out.println("lengthY " + lengthY);
//        System.out.println("scaleY " + scaleY);
//        System.out.println("spacingY " + spacingY);
//        //TESTEND
        
        
        //works when using days (period < 1 Month)
              
        // Y-axis
        ArrayList<Integer> usedValuesOnYArr= new ArrayList<>(); 
        List<Double> sortedSales = new ArrayList();
        for (int i = 0; i < scaleY; i++) {
            sortedSales.add(i, salesArrList.get(i).getUmsatz());
            int usedValuesOnY = zeroY - spacingY * i;
            usedValuesOnYArr.add(usedValuesOnY);
            System.out.println("usedValuesOnY = " + usedValuesOnY);
        }
        
        sortedSales.sort(Comparator.naturalOrder());

//        System.out.println("difference " + scaleY);
 
        
        for (int i = 0; i < scaleY; i++) {
            diagram.drawLine(zeroX - 5, zeroY - spacingY * i, zeroX + 5, zeroY - spacingY * i);
            
            diagram.drawString(sortedSales.get(i)+"", zeroX - 30, zeroY - spacingY * i);

        } 
        
        // SETTING THE VALUES
        
        ArrayList<Integer> usedValuesOnXArr = drawSelectedDates();     
        int startIndex = ComBoxDateFrom.getSelectedIndex();
        int endIndex = ComBoxDateUntil.getSelectedIndex();
        int loopLength = 0;
        
//        if (!(usedValuesOnXArr.size() == usedValuesOnYArr.size())) {
//            JOptionPane.showMessageDialog(this, "Leider ist ein fehler aufgetreten", "Hinweis", JOptionPane.INFORMATION_MESSAGE);
//        }
        
        if (usedValuesOnXArr.size() > usedValuesOnYArr.size()) {
            loopLength = usedValuesOnXArr.size();
        }
        if (usedValuesOnXArr.size() < usedValuesOnYArr.size()) {
            loopLength = usedValuesOnYArr.size();
        }
        
//        Collections.reverse(usedValuesOnXArr);
        
        System.out.println("usedValuesOnXArr.get(1) " + usedValuesOnXArr.get(1));
        System.out.println("usedValuesOnYArr.get(1) " + usedValuesOnYArr.get(1));
        for (int i = 0; i < loopLength; i++) {
            
            System.out.println("usedValuesOnXArr.get(i) " + usedValuesOnXArr.get(i));
            System.out.println("usedValuesOnYArr.get(i) " + usedValuesOnYArr.get(i));
//            
            int posX = usedValuesOnXArr.get(i);
            int posY = usedValuesOnYArr.get(i);
            
            System.out.println("posX " + posX);
            System.out.println("posY " + posY);
//                String selectedItem = ComBoxDateUntil.getItemAt(i);    
//                int day = convertStringIntoLocalDate(selectedItem).getDayOfMonth();
//                posX = zeroX + spacingX.get(i)*day - 3;  
//                posY = zeroY - spacingY * j + 5;                                   
                
              
             diagram.drawString("X", posX+2, posY + 5);
             
        }
        
        return usedValuesOnYArr;
    }
    
    //////////// UNUSED  ////////////    
    //////////// METHODS ////////////
    //////////// BELOW   ////////////
    /*
    private int drawAllSelectedDates(){  
        
        String selectedFrom = ComBoxDateFrom.getSelectedItem().toString();
        String selectedUntil = ComBoxDateUntil.getSelectedItem().toString();
        
        LocalDateTime dateTimeFrom = convertStringIntoLocalDateTime(selectedFrom);
        LocalDateTime dateTimeUntil = convertStringIntoLocalDateTime(selectedUntil);

        LocalDate dateFrom = convertStringIntoLocalDate(selectedFrom);
        LocalDate dateUntil = convertStringIntoLocalDate(selectedUntil);
        
        //getting duration between selected dates#
        Duration duration = Duration.between(dateTimeFrom, dateTimeUntil);
        int differenceHour = (int) duration.toHours();
        int differenceMinute = (int) duration.toMinutes();
        
        Period period = Period.between(dateFrom, dateUntil);
        int differenceDay = period.getDays();
        int differenceMonth = period.getMonths();            
  
        //TEST:
//        System.out.println("differenceDay " + differenceDay);
//        System.out.println("differenceMonth " + differenceMonth);
        //TESTEND
        
        int monthFrom = dateTimeFrom.getMonth().getValue();
        int dayFrom = dateTimeFrom.getDayOfMonth();
        int hourFrom = dateTimeFrom.getHour();
        int minuteFrom = dateTimeFrom.getMinute();
                
                
        int scaleX = 1;
        int usedValue = 0;
        
        if (differenceMonth == 0) {
            if (differenceDay == 0){
                if (differenceHour == 0){
                    if (differenceMinute == 0){
                        JOptionPane.showMessageDialog(this, "Der Zeitunterschied ist zu gering", "Hinweis", JOptionPane.INFORMATION_MESSAGE);
                    }
                    if (differenceMinute >= 1){
//                        System.out.println("using differenceMinute " + differenceMinute);
                        scaleX = differenceMinute; //+1 to show enought values in graph  
                        usedValue = minuteFrom;
                    } 
                }
                if (differenceHour >= 1){
//                    System.out.println("using differenceHour " + differenceHour);
                    scaleX = differenceHour; //+1 to show enought values in graph  
                    usedValue = hourFrom;
                } 
            }
            if (differenceDay >= 1){
//                System.out.println("using differenceDay " + differenceDay);
                scaleX = differenceDay; //+1 to show enought values in graph  
                usedValue = dayFrom;
            }
        }        
        if (differenceMonth >= 1) {
//            System.out.println("using differenceMonth " + differenceMonth);
            scaleX = differenceMonth; //+1 to show enought values in graph 
            usedValue = monthFrom;
        }
        
        // draw scale 
        // X-axis
        
        int lengthX = sizeX - zeroX - 15; 
        int spacingX = lengthX / scaleX;
        //TEST:
//        System.out.println("sizeX " + sizeX);
//        System.out.println("zeroX " + zeroX);
//        System.out.println("lengthX " + lengthX);
//        System.out.println("scaleX " + scaleX);
//        System.out.println("spacingX " + spacingX);
//        //TESTEND
        
        
        //works when using days (period < 1 Month)
        int countOver30 = 1;
        
        for (int i = 0; i < scaleX + 1; i++) {
            diagram.drawLine(zeroX + i*spacingX, zeroY - 5, zeroX + i*spacingX, zeroY + 5);
//            diagram.drawString(Integer.valueOf(dayFrom) + i + ".", zeroX + i*spacingX - 5, zeroY + 20);
            int labeling = Integer.valueOf(usedValue) + i;
            
            //changes the font size to smaller numbers in order to fit more 
            if (scaleX > 20) {
                    diagram.setFont(diagram.getFont().deriveFont(9.0f));                               
            }
            
            if (labeling <= 30) {               
                diagram.drawString(labeling + ".", zeroX + i*spacingX - 5, zeroY + 20);
            }            
            if (labeling > 30) {                
                diagram.drawString(countOver30 + ".", zeroX + i*spacingX - 5, zeroY + 20);
                countOver30 = countOver30 +1;
//                System.out.println("countOver30 " + countOver30);
            }                 
        }
        
        // Y-axis
//        for (int i = 1; i < sizeY/20 - 2; i++) {
//            diagram.drawLine(zeroX - 5, zeroY - i*20, zeroX + 5, zeroY - i*20);
//            diagram.drawString(""+i, zeroX - 20, zeroY - i*20 + 5);
//        }
        return spacingX;
    }
    
    private void drawBasicGraph(){  
        //testline
//        diagram.drawLine(zeroX, zeroY, sizeX, 0);    
                
        // draw axes        
        diagram.drawLine(zeroX - 10, zeroY, sizeX - 15, zeroY);
        diagram.drawLine(zeroX, sizeY - 385, zeroX, sizeY - 15);
        
        
        // draw scale 
        // X-axis
        for (int i = 1; i < sizeX/20 - 2; i++) {
            diagram.drawLine(zeroX + i*20, zeroY - 5, zeroX + i*20, zeroY + 5);
            diagram.drawString(""+i, zeroX + i*20 - 3, zeroY + 20);            
        }
        
        // Y-axis
        for (int i = 1; i < sizeY/20 - 2; i++) {
            diagram.drawLine(zeroX - 5, zeroY - i*20, zeroX + 5, zeroY - i*20);
            diagram.drawString(""+i, zeroX - 20, zeroY - i*20 + 5);
        }

    }
    
    private  LocalDate dateFrom(){
              
        String selectedFrom = ComBoxDateFrom.getSelectedItem().toString();
        String selectedUntil = ComBoxDateUntil.getSelectedItem().toString();
       
        //Splitting the from combobox      
        String[] partsDateTimeFrom = selectedFrom.split(" ");
        String FromDate = partsDateTimeFrom[0];        
        
//                                                                                System.out.println("Date " + FromDate);
//                                                                                System.out.println("Time " + FromTime);
        
        String[] partsFrom = FromDate.split("\\-");
        int yearFrom = Integer.valueOf(partsFrom[0]);        
        int monthFrom = Integer.valueOf(partsFrom[1]);
        int dayFrom = Integer.valueOf(partsFrom[2]);
        
        
//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourFrom " + hourFrom);
//                                                                                System.out.println("minuteFrom " + minuteFrom);
                                                                                
//                                                                                System.out.println("Switching to until ");
        //Splitting the until combobox        
        String[] partsDateTimeUntil = selectedUntil.split(" ");
        
//                                                                                System.out.println("Date " + UntilDate);
//                                                                                System.out.println("Time " + UntilTime);
                                                                                
        return LocalDate.of(yearFrom, monthFrom, dayFrom);
    }
    
    private LocalDate dateUntil(){
              
        String selectedUntil = ComBoxDateUntil.getSelectedItem().toString();
        
      
//                                                                                System.out.println("Date " + FromDate);
//                                                                                System.out.println("Time " + FromTime);
                                                                        
//                                                                                System.out.println("Switching to until ");
        //Splitting the until combobox        
        String[] partsDateTimeUntil = selectedUntil.split(" ");
        String UntilDate = partsDateTimeUntil[0];        
        
//                                                                                System.out.println("Date " + UntilDate);
//                                                                                System.out.println("Time " + UntilTime);
                                                                                
        String[] partsUntil = UntilDate.split("\\-");
        int yearUntil = Integer.valueOf(partsUntil[0]);      
        int monthUntil = Integer.valueOf(partsUntil[1]);
        int dayUntil = Integer.valueOf(partsUntil[2]);
        
//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourUntil " + hourUntil);
//                                                                                System.out.println("minuteUntil " + minuteUntil);

        return LocalDate.of(yearUntil, monthUntil, dayUntil);
    }    
       
    private LocalDateTime dateTimeFrom(){
              
        String selectedFrom = ComBoxDateFrom.getSelectedItem().toString();

        //input type String
//        String selectedFrom = "2018-05-01";
//        String selectedUntil = "2018-11-05"; 

        //String splitting
        
        //Splitting the from combobox      
        String[] partsDateTimeFrom = selectedFrom.split(" ");
        String FromDate = partsDateTimeFrom[0];        
        String FromTime = partsDateTimeFrom[1];
        
//                                                                                System.out.println("Date " + FromDate);
//                                                                                System.out.println("Time " + FromTime);
        
        String[] partsFrom = FromDate.split("\\-");
        int yearFrom = Integer.valueOf(partsFrom[0]);        
        int monthFrom = Integer.valueOf(partsFrom[1]);
        int dayFrom = Integer.valueOf(partsFrom[2]);
        
        String[] TimePartsFrom = FromTime.split("\\:");
        int hourFrom = Integer.valueOf(TimePartsFrom[0]);        
        int minuteFrom = Integer.valueOf(TimePartsFrom[1]);
        
//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourFrom " + hourFrom);
//                                                                                System.out.println("minuteFrom " + minuteFrom);

        return LocalDateTime.of(yearFrom, monthFrom, dayFrom, hourFrom, minuteFrom);
    }
    
    private LocalDateTime dateTimeUntil(){
              
        String selectedUntil = ComBoxDateUntil.getSelectedItem().toString();
                                                                  
//                                                                                System.out.println("Switching to until ");
        //Splitting the until combobox        
        String[] partsDateTimeUntil = selectedUntil.split(" ");
        String UntilDate = partsDateTimeUntil[0];        
        String UntilTime = partsDateTimeUntil[1];
        
//                                                                                System.out.println("Date " + UntilDate);
//                                                                                System.out.println("Time " + UntilTime);
                                                                                
        String[] partsUntil = UntilDate.split("\\-");
        int yearUntil = Integer.valueOf(partsUntil[0]);      
        int monthUntil = Integer.valueOf(partsUntil[1]);
        int dayUntil = Integer.valueOf(partsUntil[2]);
        
        String[] TimePartsUntil = UntilTime.split("\\:");
        int hourUntil = Integer.valueOf(TimePartsUntil[0]);        
        int minuteUntil = Integer.valueOf(TimePartsUntil[1]);

//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourUntil " + hourUntil);
//                                                                                System.out.println("minuteUntil " + minuteUntil);

        return LocalDateTime.of(yearUntil, monthUntil, dayUntil,hourUntil, minuteUntil);
    }
    
    private LocalDateTime allDates(){
              
        String selectedFrom = ComBoxDateFrom.getSelectedItem().toString();
        String selectedUntil = ComBoxDateUntil.getSelectedItem().toString();

        //input type String
//        String selectedFrom = "2018-05-01";
//        String selectedUntil = "2018-11-05"; 

        //String splitting
        
        //Splitting the from combobox      
        String[] partsDateTimeFrom = selectedFrom.split(" ");
        String FromDate = partsDateTimeFrom[0];        
        String FromTime = partsDateTimeFrom[1];
        
//                                                                                System.out.println("Date " + FromDate);
//                                                                                System.out.println("Time " + FromTime);
        
        String[] partsFrom = FromDate.split("\\-");
        int yearFrom = Integer.valueOf(partsFrom[0]);        
        int monthFrom = Integer.valueOf(partsFrom[1]);
        int dayFrom = Integer.valueOf(partsFrom[2]);
        
        String[] TimePartsFrom = FromTime.split("\\:");
        int hourFrom = Integer.valueOf(TimePartsFrom[0]);        
        int minuteFrom = Integer.valueOf(TimePartsFrom[1]);
        
//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourFrom " + hourFrom);
//                                                                                System.out.println("minuteFrom " + minuteFrom);
                                                                                
//                                                                                System.out.println("Switching to until ");
        //Splitting the until combobox        
        String[] partsDateTimeUntil = selectedUntil.split(" ");
        String UntilDate = partsDateTimeUntil[0];        
        String UntilTime = partsDateTimeUntil[1];
        
//                                                                                System.out.println("Date " + UntilDate);
//                                                                                System.out.println("Time " + UntilTime);
                                                                                
        String[] partsUntil = UntilDate.split("\\-");
        int yearUntil = Integer.valueOf(partsUntil[0]);      
        int monthUntil = Integer.valueOf(partsUntil[1]);
        int dayUntil = Integer.valueOf(partsUntil[2]);
        
        String[] TimePartsUntil = UntilTime.split("\\:");
        int hourUntil = Integer.valueOf(TimePartsUntil[0]);        
        int minuteUntil = Integer.valueOf(TimePartsUntil[1]);

//                                                                                System.out.println("yearFrom " + yearFrom);
//                                                                                System.out.println("monthFrom " + monthFrom);
//                                                                                System.out.println("dayFrom " + dayFrom);
//                                                                                System.out.println("hourUntil " + hourUntil);
//                                                                                System.out.println("minuteUntil " + minuteUntil);

        return LocalDateTime.of(yearUntil, monthUntil, dayUntil,hourUntil, minuteUntil);
    }
    
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComBoxDateFrom;
    private javax.swing.JComboBox<String> ComBoxDateUntil;
    private javax.swing.JButton btnLoadDates;
    private javax.swing.JButton btnLoadList;
    private javax.swing.JButton btnMitarbeiterAnlegen;
    private javax.swing.JButton btnOrders;
    private javax.swing.JButton btnShowSales;
    private javax.swing.JButton btnWarehouseList;
    private java.awt.Canvas cvDrawField;
    private javax.swing.JButton jButton1;
    private javax.swing.JList<String> jListEmployees;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAnrede;
    private javax.swing.JLabel lblAuswahl;
    private javax.swing.JLabel lblBestellt;
    private javax.swing.JLabel lblDatumBis;
    private javax.swing.JLabel lblDatumVon;
    private javax.swing.JLabel lblDatumauswahl;
    private javax.swing.JLabel lblHausNr;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblInBearb;
    private javax.swing.JLabel lblMitarbeiter;
    private javax.swing.JLabel lblNachname;
    private javax.swing.JLabel lblOrt;
    private javax.swing.JLabel lblPLZ;
    private javax.swing.JLabel lblStarsse;
    private javax.swing.JLabel lblStatusBestellungen;
    private javax.swing.JLabel lblStundenlohn;
    private javax.swing.JLabel lblUmsatz;
    private javax.swing.JLabel lblVorname;
    private javax.swing.JScrollPane scrlPanAuswahl;
    private javax.swing.JTextField txfAnrede;
    private javax.swing.JTextField txfBestellt;
    private javax.swing.JTextField txfHausNr;
    private javax.swing.JTextField txfInBearb;
    private javax.swing.JTextField txfMitarbeiterID;
    private javax.swing.JTextField txfNachname;
    private javax.swing.JTextField txfOrt;
    private javax.swing.JTextField txfPLZ;
    private javax.swing.JTextField txfStrasse;
    private javax.swing.JTextField txfStundenlohn;
    private javax.swing.JTextField txfVorname;
    // End of variables declaration//GEN-END:variables
}
